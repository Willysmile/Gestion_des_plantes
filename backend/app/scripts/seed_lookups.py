"""
Seed script pour prÃ©-remplir les lookup tables au dÃ©marrage
ExÃ©cutÃ© une seule fois lors de l'init DB
"""

from sqlalchemy.orm import Session
from app.models.lookup import (
    Location,
    PurchasePlace,
    WateringFrequency,
    LightRequirement,
    Unit,
    FertilizerType,
    DiseaseType,
    TreatmentType,
    PlantHealthStatus,
    WateringMethod,
    WaterType,
    Season,
)


def seed_locations(db: Session) -> None:
    """PrÃ©-remplit les emplacements"""
    locations = [
        Location(name="Salon", description="PiÃ¨ce principale"),
        Location(name="Chambre", description="Chambre Ã  coucher"),
        Location(name="Cuisine", description="Cuisine"),
        Location(name="Bureau", description="Bureau/Workspace"),
        Location(name="Terrasse", description="Balcon/Terrasse extÃ©rieure"),
        Location(name="Serre", description="Serre intÃ©rieure"),
        Location(name="VÃ©randa", description="VÃ©randa"),
    ]
    
    for loc in locations:
        if not db.query(Location).filter(Location.name == loc.name).first():
            db.add(loc)
    
    db.commit()


def seed_purchase_places(db: Session) -> None:
    """PrÃ©-remplit les lieux d'achat"""
    places = [
        PurchasePlace(name="Jardinerie locale", url=None),
        PurchasePlace(name="PÃ©piniÃ¨re", url=None),
        PurchasePlace(name="MarchÃ©", url=None),
        PurchasePlace(name="Amazon", url="https://www.amazon.fr"),
        PurchasePlace(name="Etsy", url="https://www.etsy.com"),
        PurchasePlace(name="Truffaut", url="https://www.truffaut.com"),
        PurchasePlace(name="Botanic", url="https://www.botanic.com"),
        PurchasePlace(name="Ã‰change/Ami", url=None),
    ]
    
    for place in places:
        if not db.query(PurchasePlace).filter(PurchasePlace.name == place.name).first():
            db.add(place)
    
    db.commit()


def seed_watering_frequencies(db: Session) -> None:
    """PrÃ©-remplit les frÃ©quences d'arrosage"""
    frequencies = [
        WateringFrequency(name="TrÃ¨s rare (1x/mois)", days_interval=30),
        WateringFrequency(name="Rare (2x/mois)", days_interval=15),
        WateringFrequency(name="Normal (1x/semaine)", days_interval=7),
        WateringFrequency(name="RÃ©gulier (2-3x/semaine)", days_interval=3),
        WateringFrequency(name="FrÃ©quent (tous les jours)", days_interval=1),
        WateringFrequency(name="Laisser sÃ©cher entre arrosages", days_interval=14),
        WateringFrequency(name="Garder humide", days_interval=2),
    ]
    
    for freq in frequencies:
        if not db.query(WateringFrequency).filter(WateringFrequency.name == freq.name).first():
            db.add(freq)
    
    db.commit()


def seed_light_requirements(db: Session) -> None:
    """PrÃ©-remplit les exigences lumineuses"""
    requirements = [
        LightRequirement(name="LumiÃ¨re directe", description="Besoin de lumiÃ¨re directe du soleil"),
        LightRequirement(name="Mi-ombre", description="LumiÃ¨re indirecte, mi-ombre"),
        LightRequirement(name="Ombre", description="Ombre, peu de lumiÃ¨re"),
        LightRequirement(name="Ombre profonde", description="Peut survivre en ombre profonde"),
        LightRequirement(name="LumiÃ¨re indirecte", description="LumiÃ¨re indirecte vive"),
        LightRequirement(name="Variable", description="Flexible, s'adapte Ã  la lumiÃ¨re"),
    ]
    
    for req in requirements:
        if not db.query(LightRequirement).filter(LightRequirement.name == req.name).first():
            db.add(req)
    
    db.commit()


def seed_units(db: Session) -> None:
    """PrÃ©-remplit les unitÃ©s"""
    units = [
        Unit(name="millilitre", symbol="ml", description="UnitÃ© de volume"),
        Unit(name="litre", symbol="L", description="UnitÃ© de volume"),
        Unit(name="centimÃ¨tre cube", symbol="cmÂ³", description="UnitÃ© de volume"),
        Unit(name="gramme", symbol="g", description="UnitÃ© de poids"),
        Unit(name="kilogramme", symbol="kg", description="UnitÃ© de poids"),
        Unit(name="cuillÃ¨re", symbol="c.", description="Mesure Ã  la cuillÃ¨re"),
        Unit(name="bÃ¢ton", symbol="bÃ¢ton", description="Engrais en forme de bÃ¢ton"),
        Unit(name="pastille", symbol="pastille", description="Engrais en forme de pastille"),
        Unit(name="dose", symbol="dose", description="Une dose"),
        Unit(name="unitÃ©", symbol="unitÃ©", description="UnitÃ© gÃ©nÃ©rique"),
    ]
    
    for unit in units:
        if not db.query(Unit).filter(Unit.name == unit.name).first():
            db.add(unit)
    
    db.commit()


def seed_fertilizer_types(db: Session) -> None:
    """PrÃ©-remplit les types d'engrais"""
    types = [
        FertilizerType(name="NPK Ã©quilibrÃ© (10-10-10)", description="Engrais Ã©quilibrÃ© pour usage gÃ©nÃ©ral", unit="ml"),
        FertilizerType(name="NPK riche en Azote (20-5-5)", description="Pour feuillage luxuriant", unit="ml"),
        FertilizerType(name="NPK riche en Potassium (5-10-20)", description="Pour fleurs et fruits", unit="ml"),
        FertilizerType(name="Engrais bio", description="Engrais organique naturel", unit="g"),
        FertilizerType(name="Engrais liquide", description="Engrais diluÃ© Ã  l'eau", unit="ml"),
        FertilizerType(name="BÃ¢tons d'engrais", description="Engrais Ã  libÃ©ration lente", unit="unitÃ©"),
        FertilizerType(name="Compost", description="Compost maison ou achetÃ©", unit="L"),
        FertilizerType(name="Engrais foliaire", description="Ã€ pulvÃ©riser sur les feuilles", unit="ml"),
    ]
    
    for fert in types:
        if not db.query(FertilizerType).filter(FertilizerType.name == fert.name).first():
            db.add(fert)
    
    db.commit()



def seed_disease_types(db: Session) -> None:
    """PrÃ©-remplit les types de maladies"""
    disease_types = [
        DiseaseType(name="OÃ¯dium", description="Maladie fongique blanche poudreuse"),
        DiseaseType(name="Mildiou", description="Maladie fongique due Ã  l'humiditÃ©"),
        DiseaseType(name="Rouille", description="Maladie fongique avec taches rouilles"),
        DiseaseType(name="Pourriture", description="DÃ©composition des tissus"),
        DiseaseType(name="Pourriture racinaire", description="Pourritures des racines par excÃ¨s d'eau"),
        DiseaseType(name="TÃ©tranyque", description="Acarien nuisible"),
        DiseaseType(name="Cochenille", description="Insecte parasite"),
        DiseaseType(name="Mouche blanche", description="Petit insecte blanc"),
        DiseaseType(name="Pucerons", description="Petits insectes suceurs de sÃ¨ve"),
    ]
    
    for dt in disease_types:
        if not db.query(DiseaseType).filter(DiseaseType.name == dt.name).first():
            db.add(dt)
    
    db.commit()


def seed_treatment_types(db: Session) -> None:
    """PrÃ©-remplit les types de traitement"""
    treatment_types = [
        TreatmentType(name="Fongicide", description="Traitement contre les maladies fongiques"),
        TreatmentType(name="Insecticide", description="Traitement contre les insectes"),
        TreatmentType(name="Nettoyage", description="Nettoyage manuel des zones affectÃ©es"),
        TreatmentType(name="Isolation", description="Isoler la plante pour Ã©viter la contamination"),
        TreatmentType(name="Eau savonneuse", description="Solution d'eau et savon"),
        TreatmentType(name="Huile de neem", description="Traitement naturel Ã  base d'huile de neem"),
        TreatmentType(name="Sulfate de cuivre", description="Fongicide Ã  base de cuivre"),
        TreatmentType(name="Extraction", description="Supprimer les parties affectÃ©es"),
    ]
    
    for tt in treatment_types:
        if not db.query(TreatmentType).filter(TreatmentType.name == tt.name).first():
            db.add(tt)
    
    db.commit()


def seed_plant_health_statuses(db: Session) -> None:
    """PrÃ©-remplit les Ã©tats de santÃ© des plantes"""
    statuses = [
        PlantHealthStatus(name="Sain", description="Plante en bonne santÃ©"),
        PlantHealthStatus(name="Malade", description="Plante atteinte d'une maladie"),
        PlantHealthStatus(name="RÃ©tablie", description="Plante ayant rÃ©cupÃ©rÃ©"),
        PlantHealthStatus(name="Critique", description="Ã‰tat critique, intervention urgente requise"),
        PlantHealthStatus(name="En traitement", description="Plante en cours de traitement"),
        PlantHealthStatus(name="En convalescence", description="Plante en pÃ©riode de rÃ©cupÃ©ration"),
    ]
    
    for status in statuses:
        if not db.query(PlantHealthStatus).filter(PlantHealthStatus.name == status.name).first():
            db.add(status)
    
    db.commit()


def seed_watering_methods(db: Session) -> None:
    """PrÃ©-remplit les mÃ©thodes d'arrosage"""
    from app.scripts.seed_watering_lookups import WATERING_METHODS
    
    for data in WATERING_METHODS:
        if not db.query(WateringMethod).filter(WateringMethod.name == data["name"]).first():
            db.add(WateringMethod(**data))
    
    db.commit()


def seed_water_types(db: Session) -> None:
    """PrÃ©-remplit les types d'eau"""
    from app.scripts.seed_watering_lookups import WATER_TYPES
    
    for data in WATER_TYPES:
        if not db.query(WaterType).filter(WaterType.name == data["name"]).first():
            db.add(WaterType(**data))
    
    db.commit()


def seed_seasons(db: Session) -> None:
    """PrÃ©-remplit les saisons"""
    from app.scripts.seed_watering_lookups import SEASONS
    
    for data in SEASONS:
        if not db.query(Season).filter(Season.name == data["name"]).first():
            db.add(Season(**data))
    
    db.commit()


def seed_all(db: Session) -> None:
    """ExÃ©cute tous les seeds"""
    print("ðŸŒ± Seeding lookup tables...")
    
    seed_locations(db)
    print("âœ… Locations seeded")
    
    seed_purchase_places(db)
    print("âœ… Purchase places seeded")
    
    seed_watering_frequencies(db)
    print("âœ… Watering frequencies seeded")
    
    seed_light_requirements(db)
    print("âœ… Light requirements seeded")
    
    seed_units(db)
    print("âœ… Units seeded")

    seed_fertilizer_types(db)
    print("âœ… Fertilizer types seeded")

    seed_disease_types(db)
    print("âœ… Disease types seeded")

    seed_treatment_types(db)
    print("âœ… Treatment types seeded")

    seed_plant_health_statuses(db)
    print("âœ… Plant health statuses seeded")

    seed_watering_methods(db)
    print("âœ… Watering methods seeded")

    seed_water_types(db)
    print("âœ… Water types seeded")

    seed_seasons(db)
    print("âœ… Seasons seeded")
    
    print("âœ… All lookups seeded successfully!")

